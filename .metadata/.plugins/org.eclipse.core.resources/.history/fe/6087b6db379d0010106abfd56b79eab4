/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  uint32_t counter = 0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	HAL_GPIO_WritePin(GPIOA, time_0_Pin, RESET);
  	HAL_GPIO_WritePin(GPIOA, time_1_Pin, RESET);
  	HAL_GPIO_WritePin(GPIOA, time_2_Pin, RESET);
  	HAL_GPIO_WritePin(GPIOA, time_3_Pin, RESET);
  	HAL_GPIO_WritePin(GPIOA, time_4_Pin, RESET);
	HAL_GPIO_WritePin(GPIOA, time_5_Pin, RESET);
	HAL_GPIO_WritePin(GPIOA, time_6_Pin, RESET);
	HAL_GPIO_WritePin(GPIOA, time_7_Pin, RESET);
	HAL_GPIO_WritePin(GPIOA, time_8_Pin, RESET);
	HAL_GPIO_WritePin(GPIOA, time_9_Pin, RESET);
	HAL_GPIO_WritePin(GPIOA, time_10_Pin, RESET);
	HAL_GPIO_WritePin(GPIOA, time_11_Pin, RESET);

	int count = 0;

  while (1)
  {
	  	  //In sequence, we toggle 2 leds once (except for the 1st time).
	  		if (count == 0) {
	  			HAL_GPIO_TogglePin(LED_12_GPIO_Port, LED_12_Pin);
	  		}
	      //Led 12 off, led 1 on and so on.
	  		if (count == 1) {
	  			HAL_GPIO_TogglePin(LED_12_GPIO_Port, LED_12_Pin);
	  			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
	  		}

	  		if (count == 2) {
	  			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
	  			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
	  		}

	  		if (count == 3) {
	  			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
	  			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
	  		}

	  		if (count == 4) {
	  			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
	  			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
	  		}

	  		if (count == 5) {
	  			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
	  			HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
	  		}

	  		if (count == 6) {
	  			HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
	  			HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
	  		}

	  		if (count == 7) {
	  			HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
	  			HAL_GPIO_TogglePin(LED_7_GPIO_Port, LED_7_Pin);
	  		}

	  		if (count == 8) {
	  			HAL_GPIO_TogglePin(LED_7_GPIO_Port, LED_7_Pin);
	  			HAL_GPIO_TogglePin(LED_8_GPIO_Port, LED_8_Pin);
	  		}

	  		if (count == 9) {
	  			HAL_GPIO_TogglePin(LED_8_GPIO_Port, LED_8_Pin);
	  			HAL_GPIO_TogglePin(LED_9_GPIO_Port, LED_9_Pin);
	  		}

	  		if (count == 10) {
	  			HAL_GPIO_TogglePin(LED_9_GPIO_Port, LED_9_Pin);
	  			HAL_GPIO_TogglePin(LED_10_GPIO_Port, LED_10_Pin);
	  		}

	  		if (count == 11) {
	  			HAL_GPIO_TogglePin(LED_10_GPIO_Port, LED_10_Pin);
	  			HAL_GPIO_TogglePin(LED_11_GPIO_Port, LED_11_Pin);
	  		}

	  		if (count == 12) {
	  			HAL_GPIO_TogglePin(LED_11_GPIO_Port, LED_11_Pin);
	  			HAL_GPIO_TogglePin(LED_12_GPIO_Port, LED_12_Pin);
	  			count = 0;
	  		}
	  		count++;
	  		HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, time_0_Pin|time_1_Pin|time_2_Pin|time_3_Pin
                          |time_4_Pin|time_5_Pin|time_6_Pin|time_7_Pin
                          |time_8_Pin|time_9_Pin|time_10_Pin|time_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : time_0_Pin time_1_Pin time_2_Pin time_3_Pin
                           time_4_Pin time_5_Pin time_6_Pin time_7_Pin
                           time_8_Pin time_9_Pin time_10_Pin time_11_Pin */
  GPIO_InitStruct.Pin = time_0_Pin|time_1_Pin|time_2_Pin|time_3_Pin
                          |time_4_Pin|time_5_Pin|time_6_Pin|time_7_Pin
                          |time_8_Pin|time_9_Pin|time_10_Pin|time_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
